version: '3'

services:


  #####################################################
  # Ego
  #####################################################
  ego-db:
    image: "postgres:9.6"
    environment:
      PGPORT: 5432
      POSTGRES_DB: ego
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - 18888:5432
  ego-api:
    image: "overture/ego:28f67f2-alpine"
    depends_on: 
      - ego-db
    volumes:
      - ./ego_bootstrap:/ego_boostrap
    environment: 
      SERVER_PORT: 8088
      SERVER_MANAGEMENT_PORT: 8089
      SPRING_PROFILES_ACTIVE: "auth"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://ego-db:5432/ego?stringtype=unspecified"
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_LOCATIONS: "classpath:flyway/sql,classpath:db/migration,filesystem:/ego_boostrap"
      GOOGLE_CLIENT_CLIENTID: "${GOOGLE_CLIENT_CLIENTID}"
      GOOGLE_CLIENT_CLIENTSECRET: "${GOOGLE_CLIENT_CLIENTSECRET}"
      #GOOGLE_CLIENT_PREESTABLISHEDREDIRECTURI: "${GOOGLE_CLIENT_PREESTABLISHEDREDIRECTURI}"
    ports:
      - 8088:8088  
    restart: always
  ego-ui:
    image: "overture/ego-ui:7de75c2-alpine"
    depends_on: 
      - ego-api
    environment:
      REACT_APP_API: "http://localhost:8088"
    ports:
      - 3501:80

  # üéºÔ∏è üéµÔ∏è üéµÔ∏è üéµÔ∏è üéµÔ∏è üéµÔ∏è üéµÔ∏è üéµÔ∏è üéµÔ∏è
  # üéºÔ∏è SONG
  # üéºÔ∏è üéµÔ∏è üéµÔ∏è üéµÔ∏è üéµÔ∏è üéµÔ∏è üéµÔ∏è üéµÔ∏è üéµÔ∏è
  song:
    image: overture/song:edge
    container_name: song
    hostname: song
    ports:
      - 7080:7080
    environment:
      # from https://github.com/overture-stack/SONG/blob/develop/song-docker-demo/server/config/application-secure.properties.template
      SERVER_PORT: 7080
      AUTH_SERVER_URL: http://ego-api:8088/o/check_token/
      AUTH_SERVER_CLIENTID: song
      AUTH_SERVER_CLIENTSECRET: song
      AUTH_SERVER_UPLOADSCOPE: collab.upload
      AUTH_SERVER_DOWNLOADSCOPE: collab.download
      SCORE_URL: http://score-server:8087
      SCORE_ACCESSTOKEN: ad83ebde-a55c-11e7-abc4-cec278b6b50a
      MANAGEMENT_SERVER_PORT: 7081
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_URL: jdbc:postgresql://song-db:54333/song?stringtype=unspecified
    depends_on:
      - song-db
#      - ego-ui
    restart: always
  song-db:
    image: "postgres:9.6"
    container_name: song-db
    hostname: song-db
    environment:
      PGPORT: 54333
      POSTGRES_DB: song
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - 32323:54333
    volumes:
      - "song-data:/var/lib/postgresql/data"
    restart: always
  # üéºÔ∏è üé∂Ô∏èÔ∏è üé∂Ô∏èÔ∏è üé∂Ô∏èÔ∏è üé∂Ô∏è üé∂Ô∏èÔ∏è üé∂Ô∏èÔ∏è üé∂Ô∏èÔ∏è üé∂Ô∏èÔ∏è
  # üéºÔ∏è Maestro
  # üéºÔ∏è üé∂Ô∏èÔ∏è üé∂Ô∏èÔ∏è üé∂Ô∏èÔ∏è üé∂Ô∏è üé∂Ô∏èÔ∏è üé∂Ô∏èÔ∏è üé∂Ô∏èÔ∏è üé∂Ô∏èÔ∏è

  maestro:
    image: overture/maestro:0.0.1-SNAPSHOT
    container_name: maestro
    ports:
      - 11235:11235
    environment:
      # elastic-search
      - maestro.elasticsearch.cluster-nodes=elasticsearch.local:9200
      - maestro.elasticsearch.indexes.file-centric.alias=file_centric
      - maestro.kafka.broker=kafka.local:9092

      # repository
      - maestro.repositories[0].code=COLLAB
      - maestro.repositories[0].url=https://song.cancercollaboratory.org
      - maestro.repositories[0].name=collaboratory
      - maestro.repositories[0].dataPath=/oicr.icgc/data
      - maestro.repositories[0].metadataPath=/oicr.icgc.meta/metadata
      - maestro.repositories[0].storageType=S3
      - maestro.repositories[0].organization=ICGC
      - maestro.repositories[0].country=CA

      # logging
      - maestro.failure-log.enabled=false
      - logging.level.root=WARN

      # admin
      - management.health.elasticsearch.enabled=false
      - management.security.enabled=false
      - spring.boot.admin.client.url=http://boot-admin:1122

    depends_on:
      - elasticsearch
      - broker
      - admin

  admin:
    image: basharlabadi/vanilla-admin-boot:0.0.2
    environment:
      - spring.boot.admin.security.enabled=false
    ports:
      - 1122:1122
    healthcheck:
      test: "curl -sS http://localhost:1111/health"
      interval: 1s
      timeout: 60s
      retries: 120
    container_name: boot-admin
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.6.1
    container_name: elasticsearch.local
    ports:
      - 9200:9200
    environment:
      - discovery.type=single-node
      - cluster.name=maestro.elasticsearch
      - "ES_JAVA_OPTS=-Xms512m -Xmx2048m"
    volumes:
      - "elasticsearch_data:/usr/share/elasticsearch/data"
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
  # see : https://docs.confluent.io/current/quickstart/ce-docker-quickstart.html#ce-docker-quickstart
  broker:
    image: confluentinc/cp-kafka:5.2.1
    hostname: kafka.local
    container_name: kafka.local
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka.local:29092,PLAINTEXT_HOST://kafka.local:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka.local:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/kafka:/kafka

  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.2.1
    depends_on:
      - zookeeper
      - broker
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka.local:29092
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"

  #####################################################
  # Score
  #####################################################
  object-storage:
    image: minio/minio:RELEASE.2018-05-11T00-29-24Z
    network_mode: host
    volumes:
      - "./.data/minio:/opt/dcc/data"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      MINIO_PORT: 8085
    deploy:
        restart_policy:
            delay: 10s
            max_attempts: 10
            window: 60s
    command: server --address=0.0.0.0:8085 /opt/dcc/data
  score-server:
    build: ./score_bootstrap
    network_mode: host
    depends_on:
      - ego-api
      - object-storage
    environment:
      DCC_DATA: /opt/dcc/data
      OBJECT_STORAGE_URL: http://localhost:8085
      S3_ACCESSKEY: minio
      S3_SECRETKEY: minio123
      AUTH_SERVER_URL: http://ego-api:8088/o/check_token/
      AUTH_SERVER_CLIENTID:  score
      AUTH_SERVER_CLIENTSECRET: scoresecret
      AUTH_SERVER_UPLOADSCOPE: demo.WRITE
      AUTH_SERVER_DOWNLOADSCOPE: demo.READ
      SERVER_URL: http://localhost:8080
      SERVER_PORT: 8087
      BUCKET_NAME_OBJECT: oicr.icgc.test
      BUCKET_NAME_STATE: oicr.icgc.test
      COLLABORATORY_DATA_DIRECTORY: data
      OBJECT_SENTINEL: heliograph
      METADATA_URL: "https://song.cancercollaboratory.org"
    ports:
      - 8087:8087
    volumes:
      - "./.data:/opt/dcc/data"
    restart: always

volumes:
  elasticsearch_data:
  song-data: